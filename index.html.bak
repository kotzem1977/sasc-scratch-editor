<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="google" value="notranslate" />
    <link rel="shortcut icon" href="static/favicon.ico" />
    <title>Scratch 3.0 GUI — SA SchoolCoding</title>

    <!-- Main editor bundle -->
    <script defer src="gui.js"></script>
<script>
/* SASC: Force Scratch VM to use official asset & project hosts; log any failed fetches */
(function(){
  function setStorageHosts(){
    try{
      const vm = window.vm;
      const st = vm && vm.runtime && vm.runtime.storage;
      if (st) {
        // Set both variants some builds use
        if (typeof st.setAssetHost   === 'function') st.setAssetHost('https://assets.scratch.mit.edu');
        if (typeof st.setProjectHost === 'function') st.setProjectHost('https://projects.scratch.mit.edu');
        // Fallback assignments if those methods don't exist on this build
        st.assetHost   = 'https://assets.scratch.mit.edu';
        st.projectHost = 'https://projects.scratch.mit.edu';
      }
    } catch(e) { console.warn('SASC storage host patch skipped:', e); }
  }

<<<<<<< HEAD
    <!-- SASC: Auto-detect + RETRY setting Scratch asset/project hosts; detailed logs -->
    <script>
    (function(){
      const HOSTS = ['https://assets.scratch.mit.edu','https://cdn.assets.scratch.mit.edu'];
      const PROJ_HOST = 'https://projects.scratch.mit.edu';
      const PROBE_MD5 = '3826a4091a33e4d26f87a2fac7cf796b.svg'; // Apple
=======
  // Log failed fetches so we can see exact status/URL if anything breaks
  (function hookFetch(){
    const orig = window.fetch;
    if (!orig) return;
    window.fetch = function(url, opts){
      return orig.call(this, url, opts).then(res => {
        if (!res.ok) console.warn('Asset fetch failed:', res.status, res.url);
        return res;
      }).catch(err => {
        console.error('Asset fetch error:', url, err);
        throw err;
      });
    };
  })();

  // Try immediately and again after VM has initialized
  window.addEventListener('load', () => {
    setStorageHosts();
    setTimeout(setStorageHosts, 800);
  });
})();
    <!-- Autosave/restore bridge (localStorage) -->

      (function () {
        const KEY = "sasc_autosave";
        const SAVE_MS = 10000;
>>>>>>> 82ffd1c (Serve Scratch GUI from dist: scratch-gui.js + matching libraries/static/chunks)

      async function probe(url){
        try {
          const r = await fetch(url, {mode:'cors', cache:'no-cache'});
          console.log('[SASC] probe', r.status, url);
          return r.ok;
        } catch (e) {
          console.warn('[SASC] probe error', url, e);
          return false;
        }
      }
      async function pickAssetHost(){
        for (const h of HOSTS){
          const ok = await probe(`${h}/internalapi/asset/${PROBE_MD5}/get/`);
          if (ok) return h;
        }
        return null;
      }
      function trySetHosts(assetHost){
        try{
          const st = window.vm?.runtime?.storage;
          if (!st) return false;
          st.setAssetHost?.(assetHost);
          st.setProjectHost?.(PROJ_HOST);
          st.assetHost   = assetHost;
          st.projectHost = PROJ_HOST;
          console.log('[SASC] SET hosts → assetHost =', st.assetHost, 'projectHost =', st.projectHost);
          return true;
        }catch(e){
          console.warn('[SASC] setHosts error', e);
          return false;
        }
      }
      async function boot(){
        const assetHost = await pickAssetHost();
        if (!assetHost){
          console.error('[SASC] No working asset host detected');
          return;
        }
        let attempts = 0;
        const timer = setInterval(() => {
          attempts++;
          const ok = trySetHosts(assetHost);
          console.log('[SASC] attempt', attempts, 'storage ready =', ok);
          if (ok || attempts >= 20) clearInterval(timer);
        }, 250);
        // one late pass just in case
        setTimeout(() => trySetHosts(assetHost), 2000);
      }
      window.addEventListener('load', boot);
    })();
    </script>

<<<<<<< HEAD
    <!-- SASC: Autosave/restore bridge (localStorage) -->
    <script>
    (function () {
      const KEY = "sasc_autosave";
      const SAVE_MS = 10000;
      function getVM() {
        try { return window.vm && typeof window.vm.toJSON === "function" ? window.vm : null; }
        catch (_) { return null; }
      }
      function tryRestore() {
        try {
          const vm = getVM(); if (!vm) return false;
          const saved = localStorage.getItem(KEY);
          if (saved) vm.loadProject(saved);
          return true;
        } catch (_) { return false; }
      }
      function startAutoSave() {
        try {
          const vm = getVM(); if (!vm) return false;
          if (window.__sascSaver) return true;
          window.__sascSaver = setInterval(() => {
            try {
              const v = getVM(); if (!v) return;
              const json = v.toJSON();
              localStorage.setItem(KEY, json);
            } catch (_) {}
          }, SAVE_MS);
          return true;
        } catch (_) { return false; }
      }
      function tick() {
        if (tryRestore() & startAutoSave()) return;
        setTimeout(tick, 500);
      }
      window.addEventListener("load", tick);
    })();
=======
        function tryRestore() {
          try {
            const vm = getVM();
            if (!vm) return false;
            const saved = localStorage.getItem(KEY);
            if (saved) {
              // loadProject accepts a JSON string in these builds
              vm.loadProject(saved);
            }
            return true;
          } catch (_) {
            return false;
          }
        }

        function startAutoSave() {
          try {
            const vm = getVM();
            if (!vm) return false;
            if (window.__sascSaver) return true; // guard against duplicates
            window.__sascSaver = setInterval(() => {
              try {
                const v = getVM();
                if (!v) return;
                const json = v.toJSON();
                localStorage.setItem(KEY, json);
              } catch (_) {}
            }, SAVE_MS);
            return true;
          } catch (_) {
            return false;
          }
        }

        // Wait until the page (and gui.js) are loaded, then poll for VM
        function tick() {
          if (tryRestore() & startAutoSave()) return;
          setTimeout(tick, 500);
        }
        window.addEventListener("load", tick);
      })();

      
>>>>>>> 82ffd1c (Serve Scratch GUI from dist: scratch-gui.js + matching libraries/static/chunks)
    </script>

    <style>
      html, body { height: 100%; margin: 0; }
      body { overflow: hidden; background: #0f0f0f; }
    </style>
  </head>
  <body></body>
</html>
